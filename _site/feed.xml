<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-21T22:14:33+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">RailsExamples</title><subtitle>A place to learn Ruby on Rails</subtitle><entry><title type="html">Database Partitioning by Example</title><link href="http://localhost:4000/database-partitioning-example/" rel="alternate" type="text/html" title="Database Partitioning by Example" /><published>2024-08-02T00:00:00+05:30</published><updated>2024-08-02T00:00:00+05:30</updated><id>http://localhost:4000/database-partitioning-example</id><content type="html" xml:base="http://localhost:4000/database-partitioning-example/"><![CDATA[<p><br /></p>

<p>As name suggests it is way of dividing database table into smaller parts generally called as partitions. Partitioning logic can vary from use case to use case. For example, we might partition users table based on ID i.e. IDs from 1 to 1,000,000 will be in first partition, IDs from 1,000,001 to 2,000,000 would be second one and like this. Another example would be based on created date, for example - All entries from 2020 would go in one partition, entries from 2021 would go in another one and so on.</p>

<h3 id="when">When?</h3>

<p>It is fair to ask when to partition table in first place. The straight forward answer would be when table data grows to a fairly large size and querying on it becomes slow and painful for database, we should look into aspect of partitioning the table.</p>

<h3 id="benefits-of-partitioning--">Benefits of partitioning -</h3>

<p>As we are dividing table into smaller chunks, searching of data becomes relatively faster. Also in Postgres, database is smart enough to only look into particular partitions based on logic in where clause.
Also maintenance operations like vacuuming are performed on relatively small and updated datasets.</p>

<h5 id="a-bit-about-our-use-case-">A bit about our use case -</h5>

<p>We have product_views table which stores information about views received on products across the platform. Over the time and by the nature of data, this table grew to a size of 20 GB, having over 50 million rows. The querying of data from this table was now relatively slow (even though we have proper indices maintained for this table) and it was sheerly because of volume of data. So what do we do now? Looking into data and size we decided to partition this table. </p>

<p>Here is how we achieved it. Our tech stack is backend powered by Ruby on rails and Postgres database. We wanted to do it with minimal changes on rails part and more on Postgres part. Postgres supports partitioning from version 11 onwards. We divided the table by created_at column yearwise. A postgresql script to create partition is -</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">CREATE</span> <span class="no">TABLE</span> <span class="n">orders</span> <span class="p">(</span>
    <span class="nb">id</span> <span class="no">SERIAL</span><span class="p">,</span>
    <span class="n">order_date</span> <span class="no">DATE</span> <span class="no">NOT</span> <span class="no">NULL</span><span class="p">,</span>
    <span class="n">customer_id</span> <span class="no">INTEGER</span><span class="p">,</span>
    <span class="n">amount</span> <span class="no">DECIMAL</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">)</span> <span class="no">PARTITION</span> <span class="no">BY</span> <span class="no">RANGE</span> <span class="p">(</span><span class="n">order_date</span><span class="p">);</span>


<span class="no">CREATE</span> <span class="no">TABLE</span> <span class="n">orders_2019</span> <span class="no">PARTITION</span> <span class="no">OF</span> <span class="n">orders</span>
    <span class="no">FOR</span> <span class="no">VALUES</span> <span class="no">FROM</span> <span class="p">(</span><span class="s1">'2019-01-01'</span><span class="p">)</span> <span class="no">TO</span> <span class="p">(</span><span class="s1">'2020-01-01'</span><span class="p">);</span>

<span class="no">CREATE</span> <span class="no">TABLE</span> <span class="n">orders_2020</span> <span class="no">PARTITION</span> <span class="no">OF</span> <span class="n">orders</span>
    <span class="no">FOR</span> <span class="no">VALUES</span> <span class="no">FROM</span> <span class="p">(</span><span class="s1">'2020-01-01'</span><span class="p">)</span> <span class="no">TO</span> <span class="p">(</span><span class="s1">'2021-01-01'</span><span class="p">);</span>

<span class="no">CREATE</span> <span class="no">TABLE</span> <span class="n">orders_2021</span> <span class="no">PARTITION</span> <span class="no">OF</span> <span class="n">orders</span>
    <span class="no">FOR</span> <span class="no">VALUES</span> <span class="no">FROM</span> <span class="p">(</span><span class="s1">'2021-01-01'</span><span class="p">)</span> <span class="no">TO</span> <span class="p">(</span><span class="s1">'2022-01-01'</span><span class="p">);</span>
    
<span class="no">CREATE</span> <span class="no">TABLE</span> <span class="n">orders_2022</span> <span class="no">PARTITION</span> <span class="no">OF</span> <span class="n">orders</span>
    <span class="no">FOR</span> <span class="no">VALUES</span> <span class="no">FROM</span> <span class="p">(</span><span class="s1">'2022-01-01'</span><span class="p">)</span> <span class="no">TO</span> <span class="p">(</span><span class="s1">'2023-01-01'</span><span class="p">);</span>

<span class="no">CREATE</span> <span class="no">TABLE</span> <span class="n">orders_2023</span> <span class="no">PARTITION</span> <span class="no">OF</span> <span class="n">orders</span>
    <span class="no">FOR</span> <span class="no">VALUES</span> <span class="no">FROM</span> <span class="p">(</span><span class="s1">'2023-01-01'</span><span class="p">)</span> <span class="no">TO</span> <span class="p">(</span><span class="s1">'2024-01-01'</span><span class="p">);</span>

<span class="no">CREATE</span> <span class="no">TABLE</span> <span class="n">orders_2024</span> <span class="no">PARTITION</span> <span class="no">OF</span> <span class="n">orders</span>
    <span class="no">FOR</span> <span class="no">VALUES</span> <span class="no">FROM</span> <span class="p">(</span><span class="s1">'2024-01-01'</span><span class="p">)</span> <span class="no">TO</span> <span class="p">(</span><span class="s1">'2025-01-01'</span><span class="p">);</span>
</code></pre></div></div>

<p>This will create the db schema discussed above. Now let’s put some data to play around. I have used this
script to put random 1 million rows into database.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'benchmark'</span>
<span class="nb">require</span> <span class="s1">'pg'</span>

<span class="k">class</span> <span class="nc">OrderGenerator</span>
  <span class="no">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">10_000</span>
  <span class="no">TOTAL_RECORDS</span> <span class="o">=</span> <span class="mi">1_000_000</span>
  <span class="no">START_DATE</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="no">END_DATE</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">2024</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>
  <span class="no">TOTAL_DAYS</span> <span class="o">=</span> <span class="p">(</span><span class="no">END_DATE</span> <span class="o">-</span> <span class="no">START_DATE</span><span class="p">).</span><span class="nf">to_i</span> <span class="o">+</span> <span class="mi">1</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">generate_orders</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="no">PG</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="ss">dbname: </span><span class="s1">'your_database_name'</span><span class="p">)</span>

    <span class="n">time</span> <span class="o">=</span> <span class="no">Benchmark</span><span class="p">.</span><span class="nf">measure</span> <span class="k">do</span>
      <span class="p">(</span><span class="mi">0</span><span class="o">...</span><span class="no">TOTAL_RECORDS</span><span class="p">).</span><span class="nf">each_slice</span><span class="p">(</span><span class="no">BATCH_SIZE</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">batch</span><span class="o">|</span>
        <span class="n">values</span> <span class="o">=</span> <span class="n">batch</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span>
          <span class="n">order_date</span> <span class="o">=</span> <span class="n">random_date</span>
          <span class="n">customer_id</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">100_000</span><span class="p">)</span>
          <span class="n">amount</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mf">10.0</span><span class="o">..</span><span class="mf">1000.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
          <span class="s2">"(DATE '</span><span class="si">#{</span><span class="n">order_date</span><span class="si">}</span><span class="s2">', </span><span class="si">#{</span><span class="n">customer_id</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">amount</span><span class="si">}</span><span class="s2">)"</span>
        <span class="k">end</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">','</span><span class="p">)</span>

        <span class="n">sql</span> <span class="o">=</span> <span class="s2">"INSERT INTO orders (order_date, customer_id, amount) VALUES </span><span class="si">#{</span><span class="n">values</span><span class="si">}</span><span class="s2">"</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
        <span class="nb">print</span> <span class="s1">'.'</span> <span class="c1"># Progress indicator</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="nb">puts</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">Time taken: </span><span class="si">#{</span><span class="n">time</span><span class="p">.</span><span class="nf">real</span><span class="p">.</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2"> seconds"</span>
    <span class="nb">puts</span> <span class="s2">"Total records inserted: </span><span class="si">#{</span><span class="n">conn</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span><span class="s2">"SELECT COUNT(*) FROM orders"</span><span class="p">).</span><span class="nf">getvalue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span>

  <span class="k">ensure</span>
    <span class="n">conn</span><span class="p">.</span><span class="nf">close</span> <span class="k">if</span> <span class="n">conn</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random_date</span>
    <span class="no">START_DATE</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="no">TOTAL_DAYS</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Generate orders</span>
<span class="no">OrderGenerator</span><span class="p">.</span><span class="nf">generate_orders</span>
</code></pre></div></div>

<p>BOOM! It ran in <code class="language-plaintext highlighter-rouge">4.2 Seconds</code>.</p>

<h3 id="running-queries">Running queries</h3>

<p>Now we have all the setup needed, let’s jump to the exciting part.</p>

<h4 id="finding-entries-from-same-year">Finding entries from same year</h4>

<p>This would be the query to finding records from the year 2020 from the partitioned table.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">orders</span> <span class="k">where</span> <span class="n">order_date</span> <span class="k">between</span> <span class="s1">'2020-07-11'</span> <span class="k">and</span> <span class="s1">'2020-08-11'</span>
</code></pre></div></div>

<p>But how will we assured that it is using partitioned table? Simple, analyze the query.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">explain</span> <span class="k">analyze</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">orders</span> <span class="k">where</span> <span class="n">order_date</span> <span class="k">between</span> <span class="s1">'2020-07-11'</span> <span class="k">and</span> <span class="s1">'2020-08-11'</span>
</code></pre></div></div>

<p>And the output is -</p>

<p><img src="/assets/images/db-partition-1.png" alt="db-partition-image" /></p>

<p>You can see that the data is being pulled from orders_2020 table which confirms partition is working. I am
just wondering if the execution time can be reduced. What can we do? Let’s try putting an index on these tables.</p>

<p>Note - For PostgreSQL 11 and later:</p>

<p>We can create a global index on the partitioned table, which will automatically propagate to all partitions:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_orders_order_date</span> <span class="k">ON</span> <span class="n">orders</span> <span class="p">(</span><span class="n">order_date</span><span class="p">);</span>
</code></pre></div></div>

<p>This single command will create the index on the parent table and all existing and future partitions.</p>

<p>Let’s rerun our query and see the result -</p>

<p><img src="/assets/images/db-partition-2.png" alt="db-partition-image" /></p>

<p>Wow the time is reduced by <code class="language-plaintext highlighter-rouge">61%</code>. This is just awesome.</p>

<p><br /></p>

<h4 id="finding-entries-from-different-years">Finding entries from different years</h4>

<p>Let’s find out records from different years.</p>

<p>Query -</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">explain</span> <span class="k">analyze</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">orders</span> <span class="k">where</span> <span class="n">order_date</span> <span class="k">between</span> <span class="s1">'2020-12-11'</span> <span class="k">and</span> <span class="s1">'2021-01-11'</span>
</code></pre></div></div>

<p>And it is executed around 10ms, which is good. Also we can see the Bitmap Heap Scan used by query planner.</p>

<p><img src="/assets/images/db-partition-3.png" alt="db-partition-image" /></p>

<h4 id="did-index-made-any-difference-here">Did index made any difference here?</h4>

<p>To find out answer to this question, let’s drop the index &amp; run query again -</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">DROP</span> <span class="k">INDEX</span> <span class="n">idx_orders_order_date</span>

<span class="k">explain</span> <span class="k">analyze</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">orders</span> <span class="k">where</span> <span class="n">order_date</span> <span class="k">between</span> <span class="s1">'2020-12-11'</span> <span class="k">and</span> <span class="s1">'2021-01-11'</span>
</code></pre></div></div>

<p>And no surprise here. The execution time is increased by 4x.</p>

<p><img src="/assets/images/db-partition-4.png" alt="db-partition-image" /></p>

<p>That’s it from this post. I hope this was interesting!</p>]]></content><author><name>swapnil</name></author><category term="Database" /><category term="Postgresql" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/db-partition.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/db-partition.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">HTTP Status Codes: An Overview</title><link href="http://localhost:4000/http-status-codes-in-rails/" rel="alternate" type="text/html" title="HTTP Status Codes: An Overview" /><published>2024-07-25T00:00:00+05:30</published><updated>2024-07-25T00:00:00+05:30</updated><id>http://localhost:4000/http-status-codes-in-rails</id><content type="html" xml:base="http://localhost:4000/http-status-codes-in-rails/"><![CDATA[<p><br /></p>

<p>HTTP status codes are an essential part of web communication, indicating the result of a client’s request to a server. Here’s an expanded list of status codes, their meanings, and how to use them in a Rails API.</p>

<hr />

<h1 id="-http-status-code-cheat-sheet">✅ HTTP Status Code Cheat Sheet</h1>

<p><br /></p>

<table border="1">
  <thead>
    <tr>
      <th style="padding-left: 10px;">Category</th>
      <th style="padding-left: 10px;">Code</th>
      <th style="padding-left: 10px;">Symbol</th>
      <th style="padding-left: 10px;">Meaning</th>
      <th style="padding-left: 10px;">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="padding-left: 10px;">1xx – Informational</td>
      <td style="padding-left: 10px;">100</td>
      <td style="padding-left: 10px;">:continue</td>
      <td style="padding-left: 10px;">Continue</td>
      <td style="padding-left: 10px;">Request received, continue processing</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">1xx – Informational</td>
      <td style="padding-left: 10px;">101</td>
      <td style="padding-left: 10px;">:switching_protocols</td>
      <td style="padding-left: 10px;">Switching Protocols</td>
      <td style="padding-left: 10px;">Protocol switch accepted</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">2xx – Success</td>
      <td style="padding-left: 10px;">200</td>
      <td style="padding-left: 10px;">:ok</td>
      <td style="padding-left: 10px;">OK</td>
      <td style="padding-left: 10px;">Request succeeded</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">2xx – Success</td>
      <td style="padding-left: 10px;">201</td>
      <td style="padding-left: 10px;">:created</td>
      <td style="padding-left: 10px;">Created</td>
      <td style="padding-left: 10px;">Resource created successfully</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">2xx – Success</td>
      <td style="padding-left: 10px;">204</td>
      <td style="padding-left: 10px;">:no_content</td>
      <td style="padding-left: 10px;">No Content</td>
      <td style="padding-left: 10px;">Success, no content returned</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">3xx – Redirection</td>
      <td style="padding-left: 10px;">301</td>
      <td style="padding-left: 10px;">:moved_permanently</td>
      <td style="padding-left: 10px;">Moved Permanently</td>
      <td style="padding-left: 10px;">Resource moved to a new URI</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">3xx – Redirection</td>
      <td style="padding-left: 10px;">302</td>
      <td style="padding-left: 10px;">:found</td>
      <td style="padding-left: 10px;">Found</td>
      <td style="padding-left: 10px;">Resource temporarily moved</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">3xx – Redirection</td>
      <td style="padding-left: 10px;">304</td>
      <td style="padding-left: 10px;">:not_modified</td>
      <td style="padding-left: 10px;">Not Modified</td>
      <td style="padding-left: 10px;">Use cached version</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">4xx – Client Error</td>
      <td style="padding-left: 10px;">400</td>
      <td style="padding-left: 10px;">:bad_request</td>
      <td style="padding-left: 10px;">Bad Request</td>
      <td style="padding-left: 10px;">Malformed request syntax</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">4xx – Client Error</td>
      <td style="padding-left: 10px;">401</td>
      <td style="padding-left: 10px;">:unauthorized</td>
      <td style="padding-left: 10px;">Unauthorized</td>
      <td style="padding-left: 10px;">Auth required</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">4xx – Client Error</td>
      <td style="padding-left: 10px;">403</td>
      <td style="padding-left: 10px;">:forbidden</td>
      <td style="padding-left: 10px;">Forbidden</td>
      <td style="padding-left: 10px;">Access denied</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">4xx – Client Error</td>
      <td style="padding-left: 10px;">404</td>
      <td style="padding-left: 10px;">:not_found</td>
      <td style="padding-left: 10px;">Not Found</td>
      <td style="padding-left: 10px;">Resource not found</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">4xx – Client Error</td>
      <td style="padding-left: 10px;">405</td>
      <td style="padding-left: 10px;">:method_not_allowed</td>
      <td style="padding-left: 10px;">Method Not Allowed</td>
      <td style="padding-left: 10px;">HTTP method not supported</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">4xx – Client Error</td>
      <td style="padding-left: 10px;">422</td>
      <td style="padding-left: 10px;">:unprocessable_entity</td>
      <td style="padding-left: 10px;">Unprocessable Entity</td>
      <td style="padding-left: 10px;">Validation errors</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">5xx – Server Error</td>
      <td style="padding-left: 10px;">500</td>
      <td style="padding-left: 10px;">:internal_server_error</td>
      <td style="padding-left: 10px;">Internal Server Error</td>
      <td style="padding-left: 10px;">Generic server error</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">5xx – Server Error</td>
      <td style="padding-left: 10px;">502</td>
      <td style="padding-left: 10px;">(no symbol)</td>
      <td style="padding-left: 10px;">Bad Gateway</td>
      <td style="padding-left: 10px;">Invalid upstream response</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">5xx – Server Error</td>
      <td style="padding-left: 10px;">503</td>
      <td style="padding-left: 10px;">:service_unavailable</td>
      <td style="padding-left: 10px;">Service Unavailable</td>
      <td style="padding-left: 10px;">Server temporarily overloaded</td>
    </tr>
    <tr>
      <td style="padding-left: 10px;">5xx – Server Error</td>
      <td style="padding-left: 10px;">504</td>
      <td style="padding-left: 10px;">(no symbol)</td>
      <td style="padding-left: 10px;">Gateway Timeout</td>
      <td style="padding-left: 10px;">Upstream timeout</td>
    </tr>
  </tbody>
</table>

<p><br />
<br /></p>

<p>ℹ️ For the full list of symbols supported by Rails, visit the <a href="https://api.rubyonrails.org/classes/ActionDispatch/Response.html#method-c-status_code">Rails Response Status Documentation</a>.</p>]]></content><author><name>swapnil</name></author><category term="Rails" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/status_codes.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/images/status_codes.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Serializers in Ruby on Rails</title><link href="http://localhost:4000/serializers-in-rails/" rel="alternate" type="text/html" title="Serializers in Ruby on Rails" /><published>2024-07-23T00:00:00+05:30</published><updated>2024-07-23T00:00:00+05:30</updated><id>http://localhost:4000/serializers-in-rails</id><content type="html" xml:base="http://localhost:4000/serializers-in-rails/"><![CDATA[<p><br /></p>

<p>When building APIs with Ruby on Rails, serializers play a pivotal role in data transformation and presentation. They serve as the crucial intermediary between your complex Ruby objects and the streamlined JSON (or other formats) that your API serves to clients. This comprehensive guide will delve deep into the world of serializers, exploring their purpose, implementation strategies, advanced techniques, and best practices.</p>

<p><br /></p>

<h2 id="understanding-serialization-in-rails">Understanding Serialization in Rails</h2>

<p>Serialization, at its core, is the process of converting complex data structures or object states into a format that can be easily stored, transmitted, and later reconstructed. In the context of web APIs, this typically involves converting Ruby objects into JSON or XML.</p>

<p><br /></p>

<h4>What are Serializers?</h4>

<ol>
  <li><strong>Data Control</strong>: Serializers allow precise control over which attributes of an object are exposed in your API.</li>
  <li><strong>Relationship Management</strong>: They provide a clean way to handle and include associated objects in API responses.</li>
  <li><strong>Custom Data Manipulation</strong>: Serializers enable the addition of computed properties or custom logic to API responses.</li>
  <li><strong>Consistency</strong>: They ensure a uniform structure for API responses across your application.</li>
  <li><strong>Security</strong>: By explicitly defining what’s exposed, serializers help prevent accidental data leaks.</li>
</ol>

<p><br /></p>

<h4 id="rails-built-in-serialization">Rails’ Built-in Serialization</h4>

<p>Before diving into dedicated serializer libraries, it’s worth noting that Rails provides basic serialization out of the box:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="k">def</span> <span class="nf">as_json</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
    <span class="k">super</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="ss">only: </span><span class="p">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">]))</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>While functional, this approach can become unwieldy for complex objects or when you need different serialization strategies for the same object.</p>

<p><br /></p>

<h3 id="activemodelserializer-a-deep-dive">ActiveModel::Serializer: A Deep Dive</h3>

<p>ActiveModel::Serializer (AMS) is the most popular serialization library for Rails. Let’s explore its features and usage in depth.</p>

<h4 id="1-setting-up-activemodelserializer">1. Setting Up ActiveModel::Serializer</h4>

<p>Add to your Gemfile:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'active_model_serializers'</span><span class="p">,</span> <span class="s1">'~&gt; 0.10.0'</span>

</code></pre></div></div>

<p>Then run <code class="language-plaintext highlighter-rouge">bundle install</code>.</p>

<h4 id="2-creating-and-customizing-serializers">2. Creating and Customizing Serializers</h4>

<p>Generate a serializer:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails generate serializer User

</code></pre></div></div>

<p>This creates <code class="language-plaintext highlighter-rouge">app/serializers/user_serializer.rb</code>. Let’s examine a comprehensive example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:full_name</span><span class="p">,</span> <span class="ss">:account_status</span>

  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_one</span> <span class="ss">:profile</span>
  <span class="n">belongs_to</span> <span class="ss">:company</span>

  <span class="k">def</span> <span class="nf">full_name</span>
    <span class="s2">"</span><span class="si">#{</span><span class="n">object</span><span class="p">.</span><span class="nf">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">object</span><span class="p">.</span><span class="nf">last_name</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">account_status</span>
    <span class="n">object</span><span class="p">.</span><span class="nf">active?</span> <span class="p">?</span> <span class="s1">'Active'</span> <span class="p">:</span> <span class="s1">'Inactive'</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">posts</span>
    <span class="n">object</span><span class="p">.</span><span class="nf">posts</span><span class="p">.</span><span class="nf">published</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">include_email?</span>
    <span class="n">scope</span> <span class="o">&amp;&amp;</span> <span class="n">scope</span><span class="p">.</span><span class="nf">admin?</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p>This serializer demonstrates several key features:</p>

<ul>
  <li>Basic attribute inclusion</li>
  <li>Association handling</li>
  <li>Custom attribute methods</li>
  <li>Conditional attribute inclusion</li>
</ul>

<h4 id="3-serializer-inheritance">3. Serializer Inheritance</h4>

<p>Serializers can inherit from each other, allowing for DRY code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BasicUserSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">DetailedUserSerializer</span> <span class="o">&lt;</span> <span class="no">BasicUserSerializer</span>
  <span class="n">attributes</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:created_at</span>

  <span class="n">has_many</span> <span class="ss">:posts</span>
<span class="k">end</span>

</code></pre></div></div>

<h4 id="4-adapter-configuration">4. Adapter Configuration</h4>

<p>AMS supports different adapters for generating JSON. The two main ones are <code class="language-plaintext highlighter-rouge">:attributes</code> and <code class="language-plaintext highlighter-rouge">:json_api</code>.</p>

<p>In <code class="language-plaintext highlighter-rouge">config/initializers/active_model_serializers.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveModelSerializers</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">adapter</span> <span class="o">=</span> <span class="ss">:attributes</span> <span class="c1"># or :json_api</span>

</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">:json_api</code> adapter follows the JSON:API spec, which provides a standardized way of formatting API responses.</p>

<p><br /></p>

<h2 id="advanced-serializer-techniques">Advanced Serializer Techniques</h2>

<h4 id="1-nested-and-compound-documents">1. Nested and Compound Documents</h4>

<p>For complex object graphs, you might need nested serializers:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span>
  <span class="n">has_many</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">serializer: </span><span class="no">PostPreviewSerializer</span>
  <span class="n">has_one</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">serializer: </span><span class="no">AddressSerializer</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">PostPreviewSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:excerpt</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">AddressSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:street</span><span class="p">,</span> <span class="ss">:city</span><span class="p">,</span> <span class="ss">:country</span>
<span class="k">end</span>

</code></pre></div></div>

<p><br /></p>

<h4 id="2-polymorphic-relationships">2. Polymorphic Relationships</h4>

<p>Handling polymorphic relationships requires special attention:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CommentSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:content</span>
  <span class="n">belongs_to</span> <span class="ss">:commentable</span><span class="p">,</span> <span class="ss">polymorphic: </span><span class="kp">true</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span>
  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">serializer: </span><span class="no">CommentSerializer</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ImageSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:url</span>
  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">serializer: </span><span class="no">CommentSerializer</span>
<span class="k">end</span>

</code></pre></div></div>

<p><br /></p>

<h4 id="3-caching-strategies">3. Caching Strategies</h4>

<p>Caching can significantly improve performance:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">cache</span> <span class="ss">key: </span><span class="s1">'user'</span><span class="p">,</span> <span class="ss">expires_in: </span><span class="mi">3</span><span class="p">.</span><span class="nf">hours</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="n">belongs_to</span> <span class="ss">:company</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>

  <span class="k">def</span> <span class="nf">cache_key</span>
    <span class="s2">"user/</span><span class="si">#{</span><span class="n">object</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">object</span><span class="p">.</span><span class="nf">updated_at</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p><br /></p>

<h4 id="4-meta-information-and-links">4. Meta Information and Links</h4>

<p>Adding meta information and links to your serialized output:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span>

  <span class="n">link</span><span class="p">(</span><span class="ss">:self</span><span class="p">)</span> <span class="p">{</span> <span class="n">user_url</span><span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">meta</span> <span class="k">do</span>
    <span class="p">{</span>
      <span class="ss">created_at: </span><span class="n">object</span><span class="p">.</span><span class="nf">created_at</span><span class="p">,</span>
      <span class="ss">last_login: </span><span class="n">object</span><span class="p">.</span><span class="nf">last_login_at</span>
    <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p><br /></p>

<h2 id="performance-optimization">Performance Optimization</h2>

<h4 id="1-n1-query-prevention">1. N+1 Query Prevention</h4>

<p>Avoid N+1 queries by eager loading associations:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="ss">:posts</span><span class="p">,</span> <span class="ss">:company</span><span class="p">).</span><span class="nf">all</span>
    <span class="n">render</span> <span class="ss">json: </span><span class="n">users</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<h4 id="2-selective-loading">2. Selective Loading</h4>

<p>Load only what you need:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span>

  <span class="n">has_many</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">if: </span><span class="o">-&gt;</span> <span class="p">{</span> <span class="n">should_include_posts?</span> <span class="p">}</span>

  <span class="k">def</span> <span class="nf">should_include_posts?</span>
    <span class="vi">@instance_options</span><span class="p">[</span><span class="ss">:include_posts</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># In your controller</span>
<span class="n">render</span> <span class="ss">json: </span><span class="vi">@user</span><span class="p">,</span> <span class="ss">include_posts: </span><span class="n">params</span><span class="p">[</span><span class="ss">:include_posts</span><span class="p">]</span>

</code></pre></div></div>

<h4 id="3-fragment-caching">3. Fragment Caching</h4>

<p>For parts of your JSON that change less frequently:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span>

  <span class="n">has_many</span> <span class="ss">:posts</span> <span class="k">do</span>
    <span class="no">Rails</span><span class="p">.</span><span class="nf">cache</span><span class="p">.</span><span class="nf">fetch</span><span class="p">([</span><span class="s2">"user"</span><span class="p">,</span> <span class="n">object</span><span class="p">.</span><span class="nf">id</span><span class="p">,</span> <span class="s2">"posts"</span><span class="p">])</span> <span class="k">do</span>
      <span class="n">object</span><span class="p">.</span><span class="nf">posts</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="no">PostSerializer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">post</span><span class="p">).</span><span class="nf">as_json</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p><br /></p>

<h2 id="api-versioning-strategies">API Versioning Strategies</h2>

<h4 id="1-namespace-based-versioning">1. Namespace-based Versioning</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">API</span>
  <span class="k">module</span> <span class="nn">V1</span>
    <span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
      <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">module</span> <span class="nn">V2</span>
    <span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
      <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:full_name</span><span class="p">,</span> <span class="ss">:email</span>

      <span class="k">def</span> <span class="nf">full_name</span>
        <span class="s2">"</span><span class="si">#{</span><span class="n">object</span><span class="p">.</span><span class="nf">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">object</span><span class="p">.</span><span class="nf">last_name</span><span class="si">}</span><span class="s2">"</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<h4 id="2-accept-header-versioning">2. Accept Header Versioning</h4>

<p>Use different serializers based on the Accept header:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">show</span>
    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
    <span class="n">render</span> <span class="ss">json: </span><span class="n">user</span><span class="p">,</span> <span class="ss">serializer: </span><span class="n">serializer_for_version</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">serializer_for_version</span>
    <span class="k">case</span> <span class="n">request</span><span class="p">.</span><span class="nf">headers</span><span class="p">[</span><span class="s1">'VERSION'</span><span class="p">]</span>
    <span class="k">when</span> <span class="s1">'v1'</span>
      <span class="no">API</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">UserSerializer</span>
    <span class="k">when</span> <span class="s1">'v2'</span>
      <span class="no">API</span><span class="o">::</span><span class="no">V2</span><span class="o">::</span><span class="no">UserSerializer</span>
    <span class="k">else</span>
      <span class="no">API</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">UserSerializer</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p><br /></p>

<h2 id="testing-serializers">Testing Serializers</h2>

<p>Thorough testing of serializers is crucial. Here’s an expanded RSpec example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">UserSerializer</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">first_name: </span><span class="s1">'John'</span><span class="p">,</span> <span class="ss">last_name: </span><span class="s1">'Doe'</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:serializer</span><span class="p">)</span> <span class="p">{</span> <span class="n">described_class</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:serialization</span><span class="p">)</span> <span class="p">{</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">serializer</span><span class="p">.</span><span class="nf">to_json</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s2">"includes the basic attributes"</span> <span class="k">do</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">serialization</span><span class="p">).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span>
      <span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="nf">id</span><span class="p">,</span>
      <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="nf">name</span><span class="p">,</span>
      <span class="s1">'email'</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="nf">email</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">"includes the full name"</span> <span class="k">do</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">serialization</span><span class="p">[</span><span class="s1">'full_name'</span><span class="p">]).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">'John Doe'</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">"includes active posts"</span> <span class="k">do</span>
    <span class="n">active_post</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="ss">user: </span><span class="n">user</span><span class="p">,</span> <span class="ss">status: </span><span class="s1">'published'</span><span class="p">)</span>
    <span class="n">inactive_post</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="ss">user: </span><span class="n">user</span><span class="p">,</span> <span class="ss">status: </span><span class="s1">'draft'</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">serialization</span><span class="p">[</span><span class="s1">'posts'</span><span class="p">]).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span>
      <span class="kp">include</span><span class="p">(</span><span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="n">active_post</span><span class="p">.</span><span class="nf">id</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">serialization</span><span class="p">[</span><span class="s1">'posts'</span><span class="p">]).</span><span class="nf">not_to</span> <span class="kp">include</span><span class="p">(</span>
      <span class="kp">include</span><span class="p">(</span><span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="n">inactive_post</span><span class="p">.</span><span class="nf">id</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s2">"when serialized by an admin"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">admin: </span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:serializer</span><span class="p">)</span> <span class="p">{</span> <span class="n">described_class</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">scope: </span><span class="n">admin</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">it</span> <span class="s2">"includes the email"</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">serialization</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="s1">'email'</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s2">"when serialized by a regular user"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:regular_user</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">admin: </span><span class="kp">false</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:serializer</span><span class="p">)</span> <span class="p">{</span> <span class="n">described_class</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">scope: </span><span class="n">regular_user</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">it</span> <span class="s2">"does not include the email"</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">serialization</span><span class="p">).</span><span class="nf">not_to</span> <span class="n">have_key</span><span class="p">(</span><span class="s1">'email'</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p><br /></p>

<h2 id="alternative-serialization-approaches">Alternative Serialization Approaches</h2>

<p>While ActiveModel::Serializer is popular, there are other approaches worth considering:</p>

<h4 id="1-jbuilder">1. Jbuilder</h4>

<p>Jbuilder allows you to build JSON structures with a Ruby DSL:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/views/users/show.json.jbuilder</span>
<span class="n">json</span><span class="p">.</span><span class="nf">extract!</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>
<span class="n">json</span><span class="p">.</span><span class="nf">posts</span> <span class="vi">@user</span><span class="p">.</span><span class="nf">posts</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
  <span class="n">json</span><span class="p">.</span><span class="nf">extract!</span> <span class="n">post</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span>
<span class="k">end</span>

</code></pre></div></div>

<h4 id="2-fast-json-api">2. Fast JSON API</h4>

<p>Developed by Netflix, Fast JSON API focuses on performance:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserSerializer</span>
  <span class="kp">include</span> <span class="no">FastJsonapi</span><span class="o">::</span><span class="no">ObjectSerializer</span>

  <span class="n">attributes</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="n">has_many</span> <span class="ss">:posts</span>

  <span class="n">attribute</span> <span class="ss">:full_name</span> <span class="k">do</span> <span class="o">|</span><span class="n">object</span><span class="o">|</span>
    <span class="s2">"</span><span class="si">#{</span><span class="n">object</span><span class="p">.</span><span class="nf">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">object</span><span class="p">.</span><span class="nf">last_name</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<h4 id="3-blueprinter">3. Blueprinter</h4>

<p>Blueprinter offers a simple, declarative approach to serialization:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserBlueprint</span> <span class="o">&lt;</span> <span class="no">Blueprinter</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">identifier</span> <span class="ss">:id</span>
  <span class="n">fields</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="n">association</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">blueprint: </span><span class="no">PostBlueprint</span>

  <span class="n">field</span> <span class="ss">:full_name</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
    <span class="s2">"</span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">last_name</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p><br /></p>

<h2 id="real-world-considerations">Real-world Considerations</h2>

<h4 id="1-handling-large-datasets">1. Handling Large Datasets</h4>

<p>For large datasets, consider pagination and using background jobs for data preparation.</p>

<h4 id="2-serializer-composition">2. Serializer Composition</h4>

<p>For complex objects, consider composing serializers:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ComplexObjectSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
  <span class="n">attributes</span> <span class="ss">:id</span>

  <span class="n">has_one</span> <span class="ss">:user</span>
  <span class="n">has_one</span> <span class="ss">:product</span>
  <span class="n">has_many</span> <span class="ss">:orders</span>

  <span class="k">def</span> <span class="nf">user</span>
    <span class="no">UserSerializer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="nf">user</span><span class="p">).</span><span class="nf">as_json</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">product</span>
    <span class="no">ProductSerializer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="nf">product</span><span class="p">).</span><span class="nf">as_json</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">orders</span>
    <span class="n">object</span><span class="p">.</span><span class="nf">orders</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">order</span><span class="o">|</span> <span class="no">OrderSerializer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">order</span><span class="p">).</span><span class="nf">as_json</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Serializers are a powerful tool in the Rails ecosystem, offering a clean, maintainable way to shape your API responses. They provide a separation of concerns, allowing your models to focus on business logic while serializers handle data presentation.</p>

<p>While ActiveModel::Serializer is a popular choice, it’s important to consider your specific needs. For simple APIs or performance-critical applications, you might opt for a lighter solution or even manual JSON construction. However, for most applications, the structure and flexibility that serializers provide make them an excellent choice.</p>

<p>As with any tool, the key is to understand the trade-offs and choose the approach that best fits your application’s needs. Whether you’re building a small API or a complex system with multiple client applications, mastering serializers will help you create robust, efficient, and maintainable Rails APIs.</p>]]></content><author><name>swapnil</name></author><category term="Rails" /><category term="Serializer" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/serializer.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/serializer.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails ActiveRecord Concerns</title><link href="http://localhost:4000/activerecord-concerns-rails/" rel="alternate" type="text/html" title="Rails ActiveRecord Concerns" /><published>2024-07-21T00:00:00+05:30</published><updated>2024-07-21T00:00:00+05:30</updated><id>http://localhost:4000/activerecord-concerns-rails</id><content type="html" xml:base="http://localhost:4000/activerecord-concerns-rails/"><![CDATA[<p><br /></p>

<p>ActiveRecord Concerns are a powerful feature in Ruby on Rails that allow you to extract common code from your models and share it across multiple classes. They provide a clean and modular way to organize your code, promoting the DRY (Don’t Repeat Yourself) principle. In this post, we’ll dive into what Concerns are, how to use them effectively, and some best practices.</p>

<p><br /></p>

<h2>What are ActiveRecord Concerns?</h2>

<p>Concerns in Rails are modules that extend ActiveSupport::Concern. They allow you to encapsulate related methods, callbacks, and validations into reusable units that can be mixed into multiple models. This is particularly useful when you have functionality that spans across different models but doesn’t warrant a full-blown class inheritance.</p>

<p><br /></p>

<h2>Creating a Concern</h2>

<p>Let’s create a simple Concern to demonstrate. Imagine we have multiple models that need timestamping functionality:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/concerns/timestampable.rb</span>
<span class="k">module</span> <span class="nn">Timestampable</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">before_save</span> <span class="ss">:set_timestamp</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">set_timestamp</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">timestamp</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">current</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><br /></p>

<h2>Using a Concern in Models</h2>

<p>To use this Concern in a model, you simply include it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="kp">include</span> <span class="no">Timestampable</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="kp">include</span> <span class="no">Timestampable</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now both Article and Comment will have the set_timestamp method and the before_save callback.</p>

<p><br /></p>

<h2>Advanced Usage: Class Methods and Instance Methods</h2>

<p>Concerns can include both instance and class methods:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Searchable</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">scope</span> <span class="ss">:search</span><span class="p">,</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="s2">"title LIKE ?"</span><span class="p">,</span> <span class="s2">"%</span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="s2">%"</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">class_methods</span> <span class="k">do</span>
    <span class="k">def</span> <span class="nf">top_results</span><span class="p">(</span><span class="n">limit</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>
      <span class="n">order</span><span class="p">(</span><span class="ss">views: :desc</span><span class="p">).</span><span class="nf">limit</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">update_search_index</span>
    <span class="c1"># Logic to update search index</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When included in a model, this Concern adds a search scope, a class method top_results, and an instance method update_search_index.</p>

<p><br /></p>

<h2>Best Practices for Using Concerns</h2>

<ol>
  <li><strong>Keep Concerns Focused</strong>: Each Concern should have a single, well-defined responsibility.</li>
  <li><strong>Name Concerns Descriptively</strong>: Use names that clearly indicate the functionality, like <code class="language-plaintext highlighter-rouge">Searchable</code>, <code class="language-plaintext highlighter-rouge">Archivable</code>, or <code class="language-plaintext highlighter-rouge">Taggable</code>.</li>
  <li><strong>Use <code class="language-plaintext highlighter-rouge">included</code> Block Wisely</strong>: The <code class="language-plaintext highlighter-rouge">included</code> block is executed in the context of the including class, making it perfect for defining callbacks, scopes, and other class-level configurations.</li>
  <li><strong>Avoid Deep Nesting</strong>: While Concerns can include other Concerns, be cautious about creating deep hierarchies that can become hard to understand.</li>
  <li><strong>Document Your Concerns</strong>: Especially if they’re used across multiple models, good documentation can save time and prevent confusion.</li>
</ol>

<p><br /></p>

<h2>When to Use Concerns vs. Inheritance</h2>

<ul>
  <li>Use Concerns when you have behavior that’s shared across unrelated models.</li>
  <li>Use inheritance when you have a clear “is-a” relationship between models.</li>
</ul>

<p><br /></p>

<h2>Testing Concerns</h2>

<p>Don’t forget to test your Concerns! You can test them in isolation:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">Timestampable</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:dummy_class</span><span class="p">)</span> <span class="p">{</span> <span class="no">Class</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="kp">include</span> <span class="no">Timestampable</span> <span class="p">}</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:dummy_instance</span><span class="p">)</span> <span class="p">{</span> <span class="n">dummy_class</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s2">"sets timestamp before save"</span> <span class="k">do</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">dummy_instance</span><span class="p">).</span><span class="nf">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:set_timestamp</span><span class="p">)</span>
    <span class="n">dummy_instance</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="ss">:save</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="conclusion">Conclusion</h2>

<p>ActiveRecord Concerns are a powerful tool in the Rails developer’s toolkit. They allow for clean, modular, and reusable code across your models. By extracting common functionality into Concerns, you can keep your models lean and focused, while still benefiting from shared behavior where needed.</p>

<p>Concerns should be used judiciously. They’re excellent for sharing behavior across unrelated models, but shouldn’t be used as a catch-all for any shared code. When used correctly, they can significantly improve the organization and maintainability of your Rails application.</p>]]></content><author><name>swapnil</name></author><category term="Rails" /><category term="ActiveRecord" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/concern.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/images/concern.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">HAML - Beautifying HTMLs</title><link href="http://localhost:4000/beautifying-htmls/" rel="alternate" type="text/html" title="HAML - Beautifying HTMLs" /><published>2024-07-18T00:00:00+05:30</published><updated>2024-07-18T00:00:00+05:30</updated><id>http://localhost:4000/beautifying-htmls</id><content type="html" xml:base="http://localhost:4000/beautifying-htmls/"><![CDATA[<p><br /></p>

<h2>What?</h2>

<p>HAML is HTML Abstract Markup Language. It is developed on one core principle - to beautify markup. But at the same time
it also helps in maintaining DRY, well intended and structured code. Haml markup is similar to CSS in syntax. For example, Haml has the same dot . representation for classes as CSS does. It is around from 2006 and is still actively maintained.</p>

<p><br /></p>

<h2>Why?</h2>

<p><strong> 1. Reduced repetition aka DRY</strong></p>

<p>HTML involves lot of repetition - once at the start and at the end of actual content. ERB also adds some repetition.<br />
For example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>Example Paragraph<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>HAML reduces this repetition like -</p>

<div class="language-haml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">%p</span> Example Paragraph
</code></pre></div></div>

<p>To make this work HAML relies on indentation.</p>

<p><strong>2. Indented &amp; structured code</strong></p>

<p>HAML forces use of strict indentation. The direct benefit of it is more structured code. For example look at this code.
The mixture of these qualities make the code beautiful. However defining beautiful code is hard, but as mentioned in HAML documentation it is one of their core principle.</p>

<p><strong>3. Executes ruby code</strong></p>

<p>It’s also possible to embed Ruby code into Haml documents. An equals sign, =, 
will output the result of the code. A hyphen, -, will run the code but not output 
the result. It also supports control statements like if, while.</p>

<p><br /></p>

<h2>How?</h2>

<p>To get more out of this article, let’s convert a HTML code block into HAML code.</p>

<p>Example 1:</p>

<p>HTML -</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;&lt;</span><span class="err">%=</span> <span class="na">post.title</span> <span class="err">%</span><span class="nt">&gt;&lt;/h1&gt;</span>
  <span class="nt">&lt;h2&gt;&lt;</span><span class="err">%=</span> <span class="na">post.subtitle</span> <span class="err">%</span><span class="nt">&gt;&lt;/h2&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"content"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">post.content</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre></div></div>

<p>HAML -</p>

<div class="language-haml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">%section</span><span class="nc">.container</span>
  <span class="nt">%h1</span><span class="p">=</span> <span class="n">post</span><span class="p">.</span><span class="nf">title</span>
  <span class="nt">%h2</span><span class="p">=</span> <span class="n">post</span><span class="p">.</span><span class="nf">subtitle</span>
  <span class="nc">.content</span>
    <span class="p">=</span> <span class="n">post</span><span class="p">.</span><span class="nf">content</span>
</code></pre></div></div>

<p>Example 2:</p>

<p>HTML -</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"navbar"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"nav-list"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/"</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/about"</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/services"</span><span class="nt">&gt;</span>Services<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/contact"</span><span class="nt">&gt;</span>Contact<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/nav&gt;</span>

<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"hero"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Welcome to Our Website<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;p&gt;</span>We provide amazing services to our clients.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/section&gt;</span>

<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"about"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h2&gt;</span>About Us<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;p&gt;</span>We are a company dedicated to providing the best services in the industry.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/section&gt;</span>

<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"services"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h2&gt;</span>Our Services<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"service-list"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"service-item"</span><span class="nt">&gt;</span>Consulting<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"service-item"</span><span class="nt">&gt;</span>Development<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"service-item"</span><span class="nt">&gt;</span>Support<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre></div></div>

<p><br />
HAML -</p>

<div class="language-haml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">%nav</span><span class="nc">.navbar</span>
  <span class="nt">%ul</span><span class="nc">.nav-list</span>
    <span class="nt">%li</span><span class="nc">.nav-item</span>
      <span class="nt">%a</span><span class="p">{</span> <span class="ss">href: </span><span class="s2">"/"</span> <span class="p">}</span> Home
    <span class="nt">%li</span><span class="nc">.nav-item</span>
      <span class="nt">%a</span><span class="p">{</span> <span class="ss">href: </span><span class="s2">"/about"</span> <span class="p">}</span> About
    <span class="nt">%li</span><span class="nc">.nav-item</span>
      <span class="nt">%a</span><span class="p">{</span> <span class="ss">href: </span><span class="s2">"/services"</span> <span class="p">}</span> Services
    <span class="nt">%li</span><span class="nc">.nav-item</span>
      <span class="nt">%a</span><span class="p">{</span> <span class="ss">href: </span><span class="s2">"/contact"</span> <span class="p">}</span> Contact

<span class="nt">%section</span><span class="nc">.hero</span>
  <span class="nt">%h1</span> Welcome to Our Website
  <span class="nt">%p</span> We provide amazing services to our clients.

<span class="nt">%section</span><span class="nc">.about</span>
  <span class="nt">%h2</span> About Us
  <span class="nt">%p</span> We are a company dedicated to providing the best services in the industry.

<span class="nt">%section</span><span class="nc">.services</span>
  <span class="nt">%h2</span> Our Services
  <span class="nt">%ul</span><span class="nc">.service-list</span>
    <span class="nt">%li</span><span class="nc">.service-item</span> Consulting
    <span class="nt">%li</span><span class="nc">.service-item</span> Development
    <span class="nt">%li</span><span class="nc">.service-item</span> Support

</code></pre></div></div>

<p>Did you noticed the change? I know it is hard to miss. Imagine the impact it can have on large codebase. It can
make them more maintainable and readable. Also its latest release supports ruby version &gt;= 2.1.0</p>

<p>References -</p>
<ol>
  <li>https://haml.info</li>
  <li>https://github.com/haml/haml</li>
</ol>]]></content><author><name>swapnil</name></author><category term="Rails" /><category term="Markup" /><category term="HTML" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/haml.png" /><media:content medium="image" url="http://localhost:4000/assets/images/haml.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Transaction by Example in Rails</title><link href="http://localhost:4000/transactions-in-rails/" rel="alternate" type="text/html" title="Transaction by Example in Rails" /><published>2023-10-29T00:00:00+05:30</published><updated>2023-10-29T00:00:00+05:30</updated><id>http://localhost:4000/transactions-in-rails</id><content type="html" xml:base="http://localhost:4000/transactions-in-rails/"><![CDATA[<p>What is transaction?</p>

<p>Transaction is the smallest non-dividable piece of code. It can be described as the entity which we cannot be modularised again into smaller modules such that it will be run in a binary form - either it is executed completely or it is not executed at all.</p>

<p>In terms of business logic, transaction can be described as a group of few operations which are necessarily need to be performed together at all cost. Let’s try to understand through an example. In digital banking a transfer of money would be successful only if the money is debited from the sender’s account and same amount of money is credited into receiver’s bank account. The transaction would be incomplete if any of these two statements are not successful.</p>

<h3>How transactions can be implemented rails?</h3>

<p>ActiveRecord has a method called ‘transaction’ which can be called like below space -</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span> 
  <span class="p">{</span><span class="n">code</span> <span class="n">block</span><span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>
<p>As this is an ActiveRecord implementation, it ensures every write or update to the database is either completely committed or none of the database updates are committed.</p>

<h3>Let's see through an example.</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span> 
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">first</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">status: </span><span class="mi">1</span><span class="p">)</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">products</span><span class="p">.</span><span class="nf">update_all</span><span class="p">(</span><span class="ss">frozen: </span><span class="kp">true</span><span class="p">)</span> 
<span class="k">end</span>
</code></pre></div></div>

<p>Here we are trying to update the <code class="language-plaintext highlighter-rouge">User</code> and associated <code class="language-plaintext highlighter-rouge">Product</code> records in the database and these are wrapped inside a transaction. The console log for this code will be like this -</p>

<p><img src="../assets/images/transaction-1.png" alt="transaction1-log" /></p>

<p>We can see that both the database updates are sucessful.</p>

<h3>Now,</h3>
<p>let’s try to play with transaction block. As we previously mentioned it will either save all changes or will not save any change. Let’s test it.</p>

<p>For this use case we will need a code which will throw an error and causes unsuccessful completion of code. We can make use of divide by 0 exception by simply putting a statement without complicating it. Here is how the updated code block will look like -</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span> 
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">first</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">status: </span><span class="mi">0</span><span class="p">)</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">products</span><span class="p">.</span><span class="nf">update_all</span><span class="p">(</span><span class="ss">frozen: </span><span class="kp">false</span><span class="p">)</span>

  <span class="c1">### will throw ZeroDivisionError</span>
  <span class="n">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="o">/</span><span class="mi">0</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Let’s try to execute this code block. And here is the result -</p>

<p><img src="../assets/images/transaction-2.png" alt="transaction2-rollback-log" /></p>

<p>As you can see from the bottom of the log, this code has thrown divided by zero exception and as a result of which, database has rolled back the transaction. Meaning both the updates first to the <code class="language-plaintext highlighter-rouge">users</code> table and second to the <code class="language-plaintext highlighter-rouge">products</code> table are not saved to the database. So both the tables users and products are now at the same state they were before running the transaction block.</p>

<h3>Curious about foo? Variable vs DB save?</h3>

<p>What happens to the value of foo? As it is not a database entity but a simple local very able how transaction deals with it? Let’s find out.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">foo</span> <span class="o">=</span> <span class="mi">1</span>
<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span> 
  <span class="n">foo</span> <span class="o">=</span> <span class="mi">2</span>

  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">first</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">status: </span><span class="mi">0</span><span class="p">)</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">products</span><span class="p">.</span><span class="nf">update_all</span><span class="p">(</span><span class="ss">frozen: </span><span class="kp">false</span><span class="p">)</span>

  <span class="c1">### will throw ZeroDivisionError</span>
  <span class="n">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="o">/</span><span class="mi">0</span>
<span class="k">end</span>
<span class="n">foo</span>
</code></pre></div></div>

<p>Let’s try to execute this code block. And here is the result -</p>

<p><img src="../assets/images/transaction-3.png" alt="transaction-3-foo" /></p>

<p>Here you can see the value of food is equal to last update value within the transaction block. Foo has not rolled back its value to pre-transaction block value. By this example we can conclude local variable values are not ruled back even if transaction fails.</p>

<h3>More on Transactions in Rails -</h3>

<ul>
  <li>
    <p><strong>Transactions are executed on a single database connection. Managing transaction in a fully distributed system is out of scope of the active record.</strong></p>
  </li>
  <li>
    <p>They can be called on any Model or an instance of Model object. like -</p>
  </li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### 1. Model</span>
<span class="no">User</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">first</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">status: </span><span class="mi">0</span><span class="p">)</span>
<span class="k">end</span>


<span class="c1">### 2. Model instance</span>
<span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">first</span>
<span class="n">user</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">status: </span><span class="mi">0</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>It is not mandatory to update only records from the model which initiated the transaction block but we can also update records from other Models. e.g. -</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">User</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">first</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">status: </span><span class="mi">0</span><span class="p">)</span>

  <span class="n">user</span><span class="p">.</span><span class="nf">picture</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">title: </span><span class="s1">'Lorem ipsum'</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<hr />

<h4>References</h4>

<ul>
  <li>rails repo - activerecord/lib/active_record/</li>
</ul>]]></content><author><name>swapnil</name></author><category term="Rails" /><category term="Database" /><summary type="html"><![CDATA[What is transaction?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/transaction-logo.webp" /><media:content medium="image" url="http://localhost:4000/assets/images/transaction-logo.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What is self in Ruby?</title><link href="http://localhost:4000/self-keyword-in-ruby/" rel="alternate" type="text/html" title="What is self in Ruby?" /><published>2023-09-08T00:00:00+05:30</published><updated>2023-09-08T00:00:00+05:30</updated><id>http://localhost:4000/self-keyword-in-ruby</id><content type="html" xml:base="http://localhost:4000/self-keyword-in-ruby/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">self</code> is a keyword in ruby which means it is reserved by Ruby to serve a specific purpose and we cannot use it like regular variables (although you can override it, but you shouldn’t).</p>

<h2 id="what-is-self-in-ruby">What is <code class="language-plaintext highlighter-rouge">self</code> in Ruby?</h2>
<p>Behaviour of self depends on what context it is defined. <code class="language-plaintext highlighter-rouge">self</code> can represent instance of class or the class itself. Let’s understand through examples.</p>

<h3 id="1-within-method">1. within method</h3>
<p>In this case, self represents the current instance of the class. It will be different for different instances of the class and will not intervene any proceedings between them.</p>

<h5 id="example-1">Example 1:</h5>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RailsExamples</span>
  <span class="k">def</span> <span class="nf">method1</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">__id__</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb<span class="o">(</span>main<span class="o">)</span>:1:0&gt; obj <span class="o">=</span> RailsExamples.new
irb<span class="o">(</span>main<span class="o">)</span>:2:0&gt; obj.method1
irb<span class="o">(</span>main<span class="o">)</span>:3:0&gt; 460060
irb<span class="o">(</span>main<span class="o">)</span>:4:0&gt; 
irb<span class="o">(</span>main<span class="o">)</span>:5:0&gt; obj.__id__
irb<span class="o">(</span>main<span class="o">)</span>:6:0&gt; 460060
irb<span class="o">(</span>main<span class="o">)</span>:7:0&gt; 
irb<span class="o">(</span>main<span class="o">)</span>:8:0&gt; obj.method1 <span class="o">==</span> RailsExamples.new.method1
irb<span class="o">(</span>main<span class="o">)</span>:9:0&gt; <span class="nb">false</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="2-within-class">2. Within class</h3>
<p>In this case <code class="language-plaintext highlighter-rouge">self</code> will represent the class itself. It will return the Class object under which it is defined. Let’s understand through example -</p>

<h5 id="example-2">Example 2:</h5>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RailsExamples</span>
  <span class="k">def</span> <span class="nf">method1</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">__id__</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method2</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">__id__</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb<span class="o">(</span>main<span class="o">)</span>:1:0&gt; RailsExamples.method2
<span class="o">=&gt;</span> 992600
irb<span class="o">(</span>main<span class="o">)</span>:2:0&gt; RailsExamples.method2
<span class="o">=&gt;</span> 992600
irb<span class="o">(</span>main<span class="o">)</span>:3:0&gt; RailsExamples.__id__
<span class="o">=&gt;</span> 992600
irb<span class="o">(</span>main<span class="o">)</span>:4:0&gt; RailsExamples.new.method1.__id__
<span class="o">=&gt;</span> 2052721
</code></pre></div></div>

<p><br /></p>

<h3 id="3-outside-any-context">3. Outside any context</h3>
<p>When <code class="language-plaintext highlighter-rouge">self</code> is called outside any class or method, it refers the main object (the top-level context).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb<span class="o">(</span>main<span class="o">)</span>:218:0&gt; p self
main
<span class="o">=&gt;</span> main
</code></pre></div></div>

<p>Happy Coding!!!</p>

<hr />
<p>References -</p>

<ul>
  <li><a href="https://railsexamples.com/keywords-in-ruby/">keywords in Ruby</a></li>
</ul>]]></content><author><name>swapnil</name></author><category term="Ruby" /><summary type="html"><![CDATA[self is a keyword in ruby which means it is reserved by Ruby to serve a specific purpose and we cannot use it like regular variables (although you can override it, but you shouldn’t).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/railsexamples-com-self.png" /><media:content medium="image" url="http://localhost:4000/assets/images/railsexamples-com-self.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Keywords in Ruby</title><link href="http://localhost:4000/keywords-in-ruby/" rel="alternate" type="text/html" title="Keywords in Ruby" /><published>2023-09-04T00:00:00+05:30</published><updated>2023-09-04T00:00:00+05:30</updated><id>http://localhost:4000/keywords-in-ruby</id><content type="html" xml:base="http://localhost:4000/keywords-in-ruby/"><![CDATA[<p>Keywords are special words in Ruby which are reserved by the language and have predefined uses. Each keyword serves a different implementation than other. Let’s dive into these keywords and understand their definitions.</p>

<ol>
  <li><span style="color:blue">BEGIN</span> -
    <ul>
      <li>Code inside BEGIN will run before any other code written in the current file.
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">END</span> -
    <ul>
      <li>Code inside END will run after any other code written in the current file
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">alias</span> -
    <ul>
      <li>alias helps to create an alias between two methods and	It has lower precedence than &amp;&amp; and is for short-circuit boolean
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">begin</span> -
    <ul>
      <li>This Ruby keyword helps us to start an exception handling block
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">break</span> -
    <ul>
      <li>It helps to leave a block early
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">case</span> -
    <ul>
      <li>This Ruby keyword helps to start a case expression
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">class</span> -
    <ul>
      <li>class helps user to create or opens a class in ruby
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">def</span> -
    <ul>
      <li>def keyword in ruby helps us to define a function
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">defined?</span> -
    <ul>
      <li>Defined? It describes its argument by returning a string 
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">do</span> -
    <ul>
      <li>This Ruby keyword helps to start a block of code
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">else</span> -
    <ul>
      <li>Else is the unhandled condition in if and unless expression
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">elsif</span> -
    <ul>
      <li>Elsif helps the user to give alternate conditions to if expression
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">end</span> -
    <ul>
      <li>methods, modules, classes etc, use end. It indicates the end of a syntax block
false	False here means boolean false 
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">ensure</span> -
    <ul>
      <li>ensure is a block of code that will always run when an exception is raised
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">for</span> -
    <ul>
      <li>To help us to create a loop for iteration
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">if</span> -
    <ul>
      <li>Used as an expression for if or modifiers if
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">in</span> -
    <ul>
      <li>It helps to separate iterable Objects and iterable variables in a for loop
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">module</span> -
    <ul>
      <li>Helps us in creating or opening module
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">next</span> -
    <ul>
      <li>Lets the user skips the rest of the code in the block
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">nil</span> -
    <ul>
      <li>Nil represents false value indicating “no value” or “unknown.”
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">not</span> -
    <ul>
      <li>It inverts the boolean expression but has less precedence than “!”
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">or</span> -
    <ul>
      <li>It represents boolean or with less precedence than “||”
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">redo</span> -
    <ul>
      <li>Redo helps to restart execution in the present block
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">rescue</span> -
    <ul>
      <li>It helps to start an exception section of code in a beginning block
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">retry</span> -
    <ul>
      <li>It helps us to retries an exception block
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">return</span> -
    <ul>
      <li>To exit from a method
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">self</span> -
    <ul>
      <li>Helps in calling Object of current method attached to
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">super</span> -
    <ul>
      <li>It helps in calling the current method in a superclass
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">then</span> -
    <ul>
      <li>In control structure, It represents the end of the conditional block
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">true</span> -
    <ul>
      <li>true here is just a simple boolean true expression
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">undef</span> -
    <ul>
      <li>It helps in preventing module or class from responding to the method call
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">unless</span> -
    <ul>
      <li>It helps in creating unless and modifiers unless expressions
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">until</span> -
    <ul>
      <li>Help us to create an iterative loop until a condition is met
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">when</span> -
    <ul>
      <li>it helps by representing a condition in a case expression
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">while</span> -
    <ul>
      <li>Help us to create an iterative loop while a condition is true
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue">yield</span> -
    <ul>
      <li>yield Helps to start execution of block send to the current method
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue"><em>ENCODING</em></span> -
    <ul>
      <li>It represents script encoding of the current file
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue"><em>LINE</em></span> -
    <ul>
      <li>It represents the line number of keywords in the current file
<br /></li>
    </ul>
  </li>
  <li><span style="color:blue"><em>FILE</em></span> -
    <ul>
      <li>It represents the path to the current file.</li>
    </ul>
  </li>
</ol>

<p><br /></p>

<p>Happy Coding!!!</p>]]></content><author><name>swapnil</name></author><category term="Ruby" /><summary type="html"><![CDATA[Keywords are special words in Ruby which are reserved by the language and have predefined uses. Each keyword serves a different implementation than other. Let’s dive into these keywords and understand their definitions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/keywords.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/images/keywords.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What is libpq?</title><link href="http://localhost:4000/what-is-libpq/" rel="alternate" type="text/html" title="What is libpq?" /><published>2023-07-03T00:00:00+05:30</published><updated>2023-07-03T00:00:00+05:30</updated><id>http://localhost:4000/what-is-libpq</id><content type="html" xml:base="http://localhost:4000/what-is-libpq/"><![CDATA[<p>You might have heard about libpq while installing/operating <code class="language-plaintext highlighter-rouge">postgresql</code>. But what is <code class="language-plaintext highlighter-rouge">libpq</code>? Let’s understand.</p>

<p><br /></p>

<!--- Define -->

<h2 id="what-is-libpq">What is libpq?</h2>
<p>libpq is a library that helps app to communicate with postgresql backend server. It is C application programmer’s interface. It helps in passing on queries and returning the result.</p>

<h3 id="also">Also</h3>
<p>As per Postgresql docs -</p>

<p>libpq is also the underlying engine for several other PostgreSQL application interfaces, including those  written for C++, Perl, Python, Tcl and ECPG. So some aspects of libpq behavior will be important to you if you use one of those packages. In particular, Section 34.15, Section 34.16 and Section 34.19 describe behavior that is visible to the user of any application that uses libpq.</p>

<!-- Layman words explaination, if possible -->

<h2 id="when-it-is-used">When it is used?</h2>
<p>If you have Postgresql on your setup, then libpq will be needed and used as underlying interface to communicate with Postgresql backend server.</p>

<h3 id="how-to-install-libpq">How to install libpq?</h3>
<ol>
  <li>On Mac OS
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>libpq
</code></pre></div>    </div>
  </li>
  <li>On Ubuntu
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>libpq-dev
</code></pre></div>    </div>
  </li>
</ol>

<p><br /></p>

<h3 id="issues-if-not-installed">Issues if not installed</h3>
<p><img src="/assets/images/libpq-error.png" alt="libpq-error-image" /></p>

<p>-&gt; Installation of <code class="language-plaintext highlighter-rouge">libpq</code> should resolve this error. If you are still facing an issue, you might need to add libpq to path. Following is example for command terminal which uses zshrc.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'export PATH="/usr/local/opt/libpq/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div>

<p><br />
<br /></p>

<h3 id="code-example-to-connect-and-print-hello-world">Code Example to connect and print hello world</h3>
<p>Code example -</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;libpq-fe.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="kt">void</span>
<span class="nf">exit_nicely</span><span class="p">(</span><span class="n">PGconn</span> <span class="o">*</span><span class="n">conn</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">PQfinish</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">conninfo</span><span class="p">;</span>
    <span class="n">PGconn</span>     <span class="o">*</span><span class="n">conn</span><span class="p">;</span>
    <span class="n">PGresult</span>   <span class="o">*</span><span class="n">res</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">conninfo</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="k">else</span>
        <span class="n">conninfo</span> <span class="o">=</span> <span class="s">"dbname=postgres"</span><span class="p">;</span>

    <span class="cm">/* Connect to the database */</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="n">PQconnectdb</span><span class="p">(</span><span class="n">conninfo</span><span class="p">);</span>

    <span class="cm">/* Verify success of database connection */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">PQstatus</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="o">!=</span> <span class="n">CONNECTION_OK</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Connection to database failed: %s"</span><span class="p">,</span>
                <span class="n">PQerrorMessage</span><span class="p">(</span><span class="n">conn</span><span class="p">));</span>
        <span class="n">exit_nicely</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/* Execute a simple query and display the results */</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">PQexec</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="s">"SELECT 'Hello World'"</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">PQgetvalue</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>

    <span class="n">PQclear</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>

    <span class="cm">/* close the connection to the database and cleanup */</span>
    <span class="n">PQfinish</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><br /></p>

<p>References -</p>

<ul>
  <li><a href="https://www.postgresql.org/docs/current/libpq.html">Postgresql libpq documentation</a></li>
  <li><a href="https://pgpedia.info/l/libpq.html">Code reference</a></li>
</ul>]]></content><author><name>swapnil</name></author><category term="Postgres" /><summary type="html"><![CDATA[You might have heard about libpq while installing/operating postgresql. But what is libpq? Let’s understand.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/libpq.png" /><media:content medium="image" url="http://localhost:4000/assets/images/libpq.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Polymorphic Associations in Rails</title><link href="http://localhost:4000/polymorphic-associations/" rel="alternate" type="text/html" title="Polymorphic Associations in Rails" /><published>2023-06-19T00:00:00+05:30</published><updated>2023-06-19T00:00:00+05:30</updated><id>http://localhost:4000/polymorphic-associations</id><content type="html" xml:base="http://localhost:4000/polymorphic-associations/"><![CDATA[<!--- Define -->
<p>.</p>
<h2 id="what-is-the-usecase">What is the usecase?</h2>
<p>Suppose two models can be associated to a third model with a common attribute. For example, <code class="language-plaintext highlighter-rouge">Image</code> can belong to <code class="language-plaintext highlighter-rouge">User</code> as well as <code class="language-plaintext highlighter-rouge">Product</code>, because user will have self image and product will have descriptive images of product.
This can be achieved with Polymorphic associations - Two or more models can be associated to third model using single association.</p>

<h2 id="how-to-use-it">How to use it?</h2>
<p>Let’s understand how to use it. There are two parts -</p>
<ol>
  <li>Migration defining two fields on the model which will have work as base model. It will have <code class="language-plaintext highlighter-rouge">association_id</code> -&gt; <code class="language-plaintext highlighter-rouge">int</code> and <code class="language-plaintext highlighter-rouge">association_type</code> -&gt; <code class="language-plaintext highlighter-rouge">string</code>.</li>
  <li>Defining associations in models.</li>
</ol>

<p>And we are ready to use it.</p>

<p>Lets understand through code example.</p>

<h2 id="code-example">Code Example</h2>
<p>Suppose we have three models - Picture, User, Product. We need specify polymorphic association at
<code class="language-plaintext highlighter-rouge">pictures</code> table creation</p>

<h4 id="1-migration">1. Migration</h4>
<p>We will add two fields <code class="language-plaintext highlighter-rouge">imageable_type</code> and <code class="language-plaintext highlighter-rouge">imageable_id</code>.
<img src="/assets/images/poly-1.png" alt="class-inheritance-example" /></p>

<h4 id="2-model-associations-changes">2. Model associations changes</h4>
<p><img src="/assets/images/poly-2.png" alt="class-inheritance-example" /></p>

<h2 id="what-if-we-do-not-use-polymorphic">What if we do not use Polymorphic?</h2>
<p>We will have to create two tables representing <code class="language-plaintext highlighter-rouge">User-Image</code> and <code class="language-plaintext highlighter-rouge">Product-Image</code> associations. That will be
storing same attributes in two tables except <code class="language-plaintext highlighter-rouge">user_id</code> and <code class="language-plaintext highlighter-rouge">product_id</code>.</p>

<h2 id="benefits">Benefits</h2>
<p>The setup provides easy access to associated models.</p>
<ul>
  <li>From an instance of the User model, you can retrieve a collection of pictures: <code class="language-plaintext highlighter-rouge">@user.pictures</code></li>
  <li>Similarly, you can retrieve <code class="language-plaintext highlighter-rouge">@product.pictures</code></li>
  <li>If you have an instance of the Picture model, you can get to its parent via <code class="language-plaintext highlighter-rouge">@picture.imageable</code></li>
  <li>Polymorphic association helps in making your code DRY(Do not Repeat Yourself)</li>
</ul>

<h2 id="can-we-test-polymorphic-associations">Can we test polymorphic associations?</h2>
<p>Yes, of course. I am using <code class="language-plaintext highlighter-rouge">rspec</code> for unit testing instead of <code class="language-plaintext highlighter-rouge">minitest</code>. It can be installed from here
<a href="https://github.com/rspec/rspec-rails" target="_blank">install rails rspec</a>.</p>

<p>If you had not installed rspec previously, run</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails generate rspec:model user
      create  spec/models/user_spec.rb

<span class="nv">$ </span>rails generate rspec:model product
      create  spec/models/product_spec.rb

<span class="nv">$ </span>rails generate rspec:model picture
      create  spec/models/picture_spec.rb
</code></pre></div></div>

<p>Now we have empty rspec files for models. Let’s add following code to picture model rspec file
<img src="/assets/images/poly-rspec.png" alt="polymorphic-rspec-example" /></p>

<p>And when we run this spec file
<img src="/assets/images/poly-run-rspec.png" alt="polymorphic-rspec-example" /></p>

<p>It will pass with flying colors!</p>

<hr />

<p><br /></p>

<p>References -</p>

<ul>
  <li><a href="https://guides.rubyonrails.org/association_basics.html#polymorphic-associations">Rails documentation</a></li>
  <li><a href="https://github.com/rspec/rspec-rails">rspec-rails</a>.</li>
</ul>]]></content><author><name>swapnil</name></author><category term="Ruby" /><category term="Rails" /><category term="Activerecord" /><summary type="html"><![CDATA[. What is the usecase? Suppose two models can be associated to a third model with a common attribute. For example, Image can belong to User as well as Product, because user will have self image and product will have descriptive images of product. This can be achieved with Polymorphic associations - Two or more models can be associated to third model using single association.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/poly-main.png" /><media:content medium="image" url="http://localhost:4000/assets/images/poly-main.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>